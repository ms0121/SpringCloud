server:
  port: 9527

spring:
  application:
    name: springcloud-gateway


  #使用gateway网关实现在服务提供者的端口号外面在包裹一层，从而隐藏真实的服务提供者
#  方式1：在uri这里写上固定的微服务名称
#  方式2：使用微服务的方式（但是必须开启下面的gateway.discovery功能配合使用）

  cloud:
    gateway:
      discovery:
        locator:
          enabled: true  # 开启从注册中心动态创建路由的功能，利用微服务名进行路由

      routes:
        - id: payment-routh               # 路由id，没有固定规则但要求唯一
#          uri: http://localhost:8001      # 匹配后提供服务的路由地址
          uri: lb://springcloud-payment-service   # lb代表负载均衡的轮询算法，匹配后提供服务的路由地址
          predicates:
            - Path=/payment/get/**        # 断言，路径相匹配的进行调用路由

        - id: payment-routh2
#          uri: http://localhost:8001
          uri: lb://springcloud-payment-service
          predicates:
            - Path=/payment/lb/**
            - After=2021-06-23T10:06:46.913+08:00[Asia/Shanghai]   # 断言: 设置当前的服务上线(可以访问的时间)
#            - Cookie=    # 访问当前的网址必须携带cookie值

eureka:
  instance:
    hostname: springcloud-gateway-service

  client:
#    将当前的微服务注册到eureka注册中心
    register-with-eureka: true
    # 表示是否从EurekaServer中抓取已有的注册信息，默认为true，单节点表为所谓，集群必须设置为
    # 为true才可以使用ribbon实现负载均衡的算法实现
    fetch-registry: true
#   将微服务注册到具体的eureka注册中心里面
    service-url:
      defaultZone: http://eureka7001.com:7001/eureka/
